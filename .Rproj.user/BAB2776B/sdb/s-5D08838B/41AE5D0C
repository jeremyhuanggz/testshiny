{
    "collab_server" : "",
    "contents" : "#this is required to load rjava in mac\n#dyn.load('/Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home/lib/server/libjvm.dylib')\n\nlibrary(shiny)\nlibrary(shinythemes)\nlibrary(dygraphs)\n\nconsolidate <- function(df,locfile,fakeline) {\n  require(xlsx)\n  require(xts)\n  locxls <- read.xlsx2(locfile,1,stringsAsFactors=F,colIndex = c(1,2),colClasses = c(\"character\",\"numeric\"))\n  colnames(locxls)[1] <- \"Date\"\n  locxts <- xts(locxls,order.by = as.Date(locxls$Date))[,-1]\n  if(!is.xts(df)) {\n    print(\"Error: df for function consolidate is not an xts object.\")\n    break\n  }\n  apdrange <- paste0((max(index(locxts))+1),\"/\")\n  outxts <- rbind(locxts,df[apdrange,])\n  outxts <- cbind(outxts,BBands(outxts)[,-4])\n  if(fakeline) savexts <- outxts[-nrow(outxts),]\n   else savexts <- outxts\n  write.xlsx2(savexts,locfile)\n  return(outxts)\n}\n\n#addsig <- function(xts1) {\n#  outdata <- cbind(xts1,BBands(xts1)[,-4])\n#  return(outdata)\n#}\n\ndraw <- function(xts1, ttlname) {\n  require(quantmod)\n  require(dygraphs)\n  \n  dygraph(xts1,main=paste(ttlname,\"Trends\")) %>% \n    dySeries(ttlname,color=\"black\") %>% \n    dySeries(\"dn\",color=\"brown\") %>% \n    dySeries(\"mavg\",color=\"green\") %>% \n    dySeries(\"up\",color=\"blue\") %>% \n    dyLegend(show=\"always\",width=600,hideOnMouseOut=F) %>% \n    dyRangeSelector()\n\n}\n\nui <- fluidPage(\n  theme = shinytheme(\"simplex\"),\n  \n  titlePanel(\"Market Turbulance\"),\n  \n  tabsetPanel(\n    tabPanel(\"XAU/USD\",\n             textInput(inputId = \"pricexau\",\n                       label=h4(\"Input the latest price\"),\n                       value=\"0\"),\n             actionButton(inputId = \"refresh1\",\n                          label = \"XAU/USD\"),\n             hr(),\n             tableOutput(\"xautable\"),\n             dygraphOutput(\"outplot.xau\")\n             #plotOutput(\"outplot.xau\")\n             ),\n    tabPanel(\"XAG/USD\",\n             textInput(inputId = \"pricexag\",\n                       label=h4(\"Input the latest price\"),\n                       value=\"0\"),\n             actionButton(inputId = \"refresh2\",\n                          label = \"XAG/USD\"),\n             hr(),\n             tableOutput(\"xagtable\"),\n             dygraphOutput(\"outplot.xag\")\n    ),\n    tabPanel(\"GBP/USD\",\n             textInput(inputId = \"pricegbp\",\n                       label=h4(\"Input the latest price\"),\n                       value=\"0\"),\n             actionButton(inputId = \"refresh3\",\n                          label = \"GBP/USD\"),\n             hr(),\n             tableOutput(\"gbptable\"),\n             dygraphOutput(\"outplot.gbp\")\n    ),\n    tabPanel(\"USD/JPY\",\n             textInput(inputId = \"pricejpy\",\n                       label=h4(\"Input the latest price\"),\n                       value=\"0\"),\n             actionButton(inputId = \"refresh4\",\n                          label = \"USD/JPY\"),\n             hr(),\n             tableOutput(\"jpytable\"),\n             dygraphOutput(\"outplot.jpy\")\n    )\n  )\n \n)\n\nserver <- function(input, output) {\n  require(quantmod)\n  require(curl)\n  require(xts)\n  require(dygraphs)\n  \n  #latest <- eventReactive(input$refresh1, input$lastprice)\n  #latestprice <- isolate({latest()})\n  \n  \n  \n  observeEvent(input$refresh1, {\n    xauprice <- F\n    getSymbols(\"XAU/USD\",src=\"oanda\")\n    latestprice <- isolate(input$pricexau)\n    if(latestprice>0) {\n      xauprice <- T\n      newline <- xts(data.frame(XAU.USD=latestprice),order.by = Sys.Date())\n      XAUUSD <- rbind(XAUUSD, newline)\n    }\n    \n    XAUUSD <- consolidate(XAUUSD, \"XAUUSD.xls\",xauprice)\n    \n    #XAUUSD <- addsig(XAUUSD)\n    output$xautable <- renderTable(tail(XAUUSD,2),striped=T,hover=T,bordered = T,rownames = T)\n    output$outplot.xau <- renderDygraph({\n      draw(XAUUSD,\"XAU.USD\")\n      #lineChart(XAUUSD,TA=c(addEMA(20),addBBands()))\n    #addSMA(20)\n    \n    #addBBands() \n    #addEMA(20)\n    #addCCI()\n    })\n  })\n  \n  observeEvent(input$refresh2, {\n    xagprice <- F\n    getSymbols(\"XAG/USD\",src=\"oanda\")\n    latestprice <- isolate(input$pricexag)\n    if(latestprice>0) {\n      xagprice <- T\n      newline <- xts(data.frame(XAG.USD=latestprice),order.by = Sys.Date())\n      XAGUSD <- rbind(XAGUSD, newline)\n    }\n    \n    XAGUSD <- consolidate(XAGUSD, \"XAGUSD.xls\",xagprice)\n    \n    #XAGUSD <- addsig(XAGUSD)\n    output$xagtable <- renderTable(tail(XAGUSD,2),striped=T,hover=T,bordered = T,rownames = T)\n    output$outplot.xag <- renderDygraph({\n      draw(XAGUSD,\"XAG.USD\")\n      #lineChart(XAGUSD,TA=c(addEMA(20),addBBands()))\n      #addEMA(20)\n      #addBBands()\n    })  \n  })\n  \n  observeEvent(input$refresh3, {\n    gbpprice <- F\n    getSymbols(\"GBP/USD\",src=\"oanda\")\n    latestprice <- isolate(input$pricegbp)\n    if(latestprice>0) {\n      gbpprice <- T\n      newline <- xts(data.frame(GBP.USD=latestprice),order.by = Sys.Date())\n      GBPUSD <- rbind(GBPUSD, newline)\n    }\n    GBPUSD <- consolidate(GBPUSD, \"GBPUSD.xls\",gbpprice)\n    #GBPUSD <- addsig(GBPUSD)\n    output$gbptable <- renderTable(tail(GBPUSD,2),striped=T,hover=T,bordered = T,rownames = T,digits = 4)\n    output$outplot.gbp <- renderDygraph({\n      draw(GBPUSD,\"GBP.USD\")\n      #lineChart(GBPUSD,TA=c(addEMA(20),addBBands()))\n      #addEMA(20)\n      #addBBands()\n    })\n  })  \n    \n    observeEvent(input$refresh4, {\n      jpyprice <- F\n      getSymbols(\"USD/JPY\",src=\"oanda\")\n      latestprice <- isolate(input$pricejpy)\n      if(latestprice>0) {\n        jpyprice <- T\n        newline <- xts(data.frame(USD.JPY=latestprice),order.by = Sys.Date())\n        USDJPY <- rbind(USDJPY, newline)\n      }\n      USDJPY <- consolidate(USDJPY, \"USDJPY.xls\",jpyprice)\n      #USDJPY <- addsig(USDJPY)\n      output$jpytable <- renderTable(tail(USDJPY,2),striped=T,hover=T,bordered = T,rownames = T)\n      output$outplot.jpy <- renderDygraph({\n        draw(USDJPY,\"USD.JPY\")\n        #lineChart(USDJPY,TA=c(addEMA(20),addBBands()))\n        #addEMA(20)\n        #addBBands()\n      })  \n  })\n  \n\n}\n\nshinyApp(ui = ui, server = server)",
    "created" : 1497062149641.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1019590186",
    "id" : "41AE5D0C",
    "lastKnownWriteTime" : 1516498466,
    "last_content_update" : 1516498466668,
    "path" : "~/Documents/hjh/rprojects/testshiny/testshiny/app.R",
    "project_path" : "app.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}